{\rtf1\ansi\ansicpg932\cocoartf1561\cocoasubrtf610
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fmodern\fcharset0 Courier;\f2\fnil\fcharset128 HiraginoSans-W3;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;}
{\*\expandedcolortbl;;\csgray\c0;\csgray\c100000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww14840\viewh14640\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 \CocoaLigature0 -- Assignment\
\
1. Design a heuristic algorithm for the bin packing problem (BPP),\
   and make a program code of it using the C language.\
   You should follow the instructions below, otherwise your program \
   will not be accepted.\
   Then send the program to\
     Okada.kanji "at" d.mbox.nagoya-u.ac.jp\
     (NOTE: Please change "at" appropriately.)\
   as a part of or as an attachment file of an e-mail message.\
   Do not forget to tell me your full-name (in Japanese if you are Japanese)\
   when you send your program to me. The due date will be announced later.\
\
2. Write the basic ideas as well as the details of your heuristic\
   algorithm for BPP and submit it as a report. The report should consist of\
   3 pages or less using A4 paper. The language is either Japanese or English\
   (I prefer Japanese). The due date and where to submit it will be announced\
   later.\
\
3. Give a presentation on your algorithm. You can use a projector. The language should be Japanese\
   or English. The details will be explained later during the lecture.\
\
\
\
-- Programming\
\
Write your program in one file named \'93bpp.c".\
\
Copy "template.c" as \'93bpp.c" and write your own algorithm by editing \'93bpp.c".\
The file "sample.c" gives a simple example, so it might be easier for you\
to use sample.c instead of template.c and modify the subroutine named\
"my_algorithm" in it. \
\
Store your best solution in vdata.bestsol*, then the subroutine\
"recompute_obj()" will output its objective value. (For details, see the\
comments in "template.c".)\
\
Your program should not output anything except for the output by the\
subroutine recompute_obj().\
\
Never use Japanese characters in the comment lines of your source code(s).\
\
Do not modify the parameter name \'93TIMELIM\'94, and do not change some important\
subroutines.\
\
The stopping criterion of your algorithm should be as follows: Stop when\
the CPU time consumed by the algorithm exceeds the time limit (which\
is given by the parameter \'93TIMELIM\'94). Use function "cpu_time()" to check\
CPU time. Note that you should not call cpu_time() too often. Calling it\
whenever you evaluate a solution would be too much. If your algorithm is\
based on simple local search, then it is usually enough to check CPU time\
only when the local search reaches a locally optimal solution. The time\
limit for the competition will be 5 minutes (300 seconds) on a PC with\
Xeon X3363 2.83GHz. It is OK if the final CPU time of your algorithm exceeds\
300 seconds by a few seconds. However, if the exceeding time becomes more\
than one minute, you will get penalty.\
\
\
\
-- Competition\
\
\pard\pardeftab720\partightenfactor0

\f1\fs26 \cf0 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 A few problem instances will be chosen for the competition from the \
directory named "data". Which instances are used will not be announced \
before the competition.
\f0\fs24 \cf2 \cb3 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\
A PC with Xeon X3363 2.83GHz and 24GB memory is used for the competition, where\
the programs are compiled and run under Linux (Red Hat Enterprise) environment.\
Compile options will be \
\
  gcc -Wall -O2 -o bpp bpp.c -lm\
\
unless otherwise requested from you.\
\
\pard\pardeftab720\partightenfactor0

\f1\fs26 \cf0 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 If you have the same (or a similar) environment in your laboratory, it is\
recommended to test your program under that environment to check if it can\
be compiled and run properly before you submit it. If your program has\
problems in compiling or running, it may not be considered for evaluation.
\f0\fs24 \cf2 \cb3 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\
\
-- To compile\
\
To compile \'93template.c\'94, type for example\
\
  gcc -Wall -O2 -o template template.c -lm\
\
from the command line. Compilation of your \'93bpp.c\'94 is similar.\
\
\
\
-- To execute\
\
One of the handiest ways to execute your program \'93bpp" is to type\
\
  ./bpp A1.csv A1.tex\
\
from the command line. Note that "A1.csv\'94 is the file where data of a simple\
problem instance are written(it consists of only 5 rectangles).\
By this, the following is output. \
  number of used bin:*\
  filling rate = **.**%\
  time for the search:      ***.** seconds\
  time to read the instance:    ***.** seconds\
\
\'93A1.tex\'94 shows the layout of rectangles.\
If you would like to see layout, please open tex file and click \'93
\f2 \'83\'5e\'83\'43\'83\'76\'83\'5a\'83\'62\'83\'67
\f0 \'94.\
A1 is instance name, so please change the name according to instance name.\
Please ask lab members how to install TeX, install TeX in your PC.\
TeX is also used when writing a paper.\
\
-- About cpu_time.c\
\
Program "cpu_time.c" was made by Dr. Nobuyuki Tsuchimura. This is used to\
measure the computation time. Its latest version is available at his home page:\
\
  "http://www.nn.iij4u.or.jp/~tutimura/c/cpu_time.c".\
\
If you have problems in using it, please let me know.}